{
  "openapi": "3.0.1",
  "info": {
    "title": "Data Manager API",
    "version": "1.0"
  },
  "servers": [
    {
      "url": "https://{hostname}/mypersonaldata/api",
      "variables": {
        "hostname": {
          "default": "localhost"
        }
      }
    }
  ],
  "paths": {
    "/v1/apps/{APPID}/data": {
      "get": {
        "tags": [
          "From IoT App"
        ],
        "summary": "Get DATA",
        "description": "It returns a JSON representation of the DATA belonging to the specified _APPID_. If _APPID_ starts with http%3A%2F%2F, it is decoded.",
        "parameters": [
          {
            "$ref": "#/components/parameters/sourceRequest"
          },
          {
            "$ref": "#/components/parameters/accessToken"
          },
          {
            "$ref": "#/components/parameters/lang"
          },
          {
            "$ref": "#/components/parameters/from"
          },
          {
            "$ref": "#/components/parameters/to"
          },
          {
            "$ref": "#/components/parameters/first"
          },
          {
            "$ref": "#/components/parameters/last"
          },
          {
            "$ref": "#/components/parameters/variableName"
          },
          {
            "$ref": "#/components/parameters/motivation"
          },
          {
            "$ref": "#/components/parameters/delegated"
          },
          {
            "$ref": "#/components/parameters/anonymous"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getData"
          },
          "204": {
            "description": "No content (if no content is returned)."
          },
          "400": {
            "description": "Bad request (if an error arise parsing client request). Remarkable example: the passed DATA has the _APP_ID_ field not recognized."
          },
          "401": {
            "description": "Not Authorized (if an autherization error arise parsing client request)."
          },
          "500": {
            "description": "Internal Server Error (if an error arise on server side)."
          },
          "501": {
            "description": "Not Implemented (if the invoked api is not supported anymore)."
          }
        }
      },
      "post": {
        "tags": [
          "From IoT App"
        ],
        "summary": "Post DATA",
        "description": "It stores a JSON representation of a DATA for the specified _APPID_. If _APPID_ starts with http%3A%2F%2F, it is decoded. If the DATA are successfully stored, it returns HTTP 200 and a JSON representation of the DATA. If the DATA to store include the field _id_ an HTTP 400 is returned (and an explanation is provided in the _Entity_). The fields _insertTime_, _deleteTime_, _elapseTime_ are overriden by the server. If the _username_ is missing, the correct data are retrieved from the _APPID_.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sourceRequest"
          },
          {
            "$ref": "#/components/parameters/accessToken"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "A JSON object with the data to be stored.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "dataTime",
                  "APPID",
                  "motivation",
                  "variableName",
                  "variableValue",
                  "variableUnit"
                ],
                "properties": {
                  "dataTime": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1523529262000
                  },
                  "APPID": {
                    "type": "string",
                    "example": "nrz3b5r"
                  },
                  "motivation": {
                    "type": "string",
                    "example": "testing"
                  },
                  "variableName": {
                    "type": "string",
                    "example": "personaldata"
                  },
                  "variableValue": {
                    "type": "string",
                    "example": 11
                  },
                  "variableUnit": {
                    "type": "string",
                    "example": "float"
                  },
                  "username": {
                    "type": "string",
                    "example": "mypersonaldata.tester"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/postData"
          },
          "204": {
            "description": "No content (if no content is returned)."
          },
          "400": {
            "description": "Bad request (if an error arise parsing client request). Remarkable example: the passed DATA has the _ID_ field NOT null."
          },
          "401": {
            "description": "Not Authorized (if an autherization error arise parsing client request)."
          },
          "500": {
            "description": "Internal Server Error (if an error arise on server side)."
          },
          "501": {
            "description": "Not Implemented (if the invoked api is not supported anymore)."
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/APPID"
        }
      ]
    },
    "/v1/apps/{APPID}/delegated": {
      "get": {
        "tags": [
          "From IoT App"
        ],
        "summary": "Get DELEGATED v1",
        "description": "It returns a JSON representation of the DELEGATIONS that are given to the user that owns the specified _APPID_. If _APPID_ starts with http%3A%2F%2F, it is decoded. If _usernameDelegated_ is set to _ANONYMOUS_, the delegation is public/anonymous. Null values for _appId_ and _appType_ mean the delegation is valid for an Annotation made by the user (out of the IOT-APP context). It does not return the group's delegations.",
        "parameters": [
          {
            "$ref": "#/components/parameters/sourceRequest"
          },
          {
            "$ref": "#/components/parameters/accessToken"
          },
          {
            "$ref": "#/components/parameters/lang"
          },
          {
            "$ref": "#/components/parameters/variableName"
          },
          {
            "$ref": "#/components/parameters/motivation"
          },
          {
            "$ref": "#/components/parameters/deleted"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/delegations"
          },
          "204": {
            "description": "No content (if no content is returned)."
          },
          "400": {
            "description": "Bad request (if an error arise parsing client request)."
          },
          "401": {
            "description": "Not Authorized (if an autherization error arise parsing client request)."
          },
          "500": {
            "description": "Internal Server Error (if an error arise on server side)."
          },
          "501": {
            "description": "Not Implemented (if the invoked api is not supported anymore)."
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/APPID"
        }
      ]
    },
    "/v2/apps/{APPID}/delegated": {
      "get": {
        "tags": [
          "From IoT App"
        ],
        "summary": "Get DELEGATED v2",
        "description": "Same as V1, but supporting group's delegations. It returns a JSON representation of the DELEGATIONS that are given to the user that owns the specified _APPID_. If _APPID_ starts with http%3A%2F%2F, it is decoded. If _usernameDelegated_ is set to _ANONYMOUS_, the delegation is public/anonymous. Null values for _appId_ and _appType_ mean the delegation is valid for an Annotation made by the user (out of the IOT-APP context).",
        "parameters": [
          {
            "$ref": "#/components/parameters/sourceRequest"
          },
          {
            "$ref": "#/components/parameters/accessToken"
          },
          {
            "$ref": "#/components/parameters/lang"
          },
          {
            "$ref": "#/components/parameters/variableName"
          },
          {
            "$ref": "#/components/parameters/motivation"
          },
          {
            "$ref": "#/components/parameters/deleted"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/delegations"
          },
          "204": {
            "description": "No content (if no content is returned)."
          },
          "400": {
            "description": "Bad request (if an error arise parsing client request)."
          },
          "401": {
            "description": "Not Authorized (if an autherization error arise parsing client request)."
          },
          "500": {
            "description": "Internal Server Error (if an error arise on server side)."
          },
          "501": {
            "description": "Not Implemented (if the invoked api is not supported anymore)."
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/APPID"
        }
      ]
    },
    "/v1/apps/{APPID}/delegator": {
      "get": {
        "tags": [
          "From IoT App"
        ],
        "summary": "Get DELEGATOR v1",
        "description": "It returns a JSON representation of the DELEGATIONS that the specified _APPID_ gave to an user. If _APPID_ starts with http%3A%2F%2F, it is decoded. If _usernameDelegated_ is set to _ANONYMOUS_, the delegation is public/anonymous. Null values for _appId_ and _appType_ mean the delegation is valid for an Annotation made by the user (out of the IOT-APP context). It does not return the group's delegations.",
        "parameters": [
          {
            "$ref": "#/components/parameters/sourceRequest"
          },
          {
            "$ref": "#/components/parameters/accessToken"
          },
          {
            "$ref": "#/components/parameters/lang"
          },
          {
            "$ref": "#/components/parameters/variableName"
          },
          {
            "$ref": "#/components/parameters/motivation"
          },
          {
            "$ref": "#/components/parameters/deleted"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/delegations"
          },
          "204": {
            "description": "No content (if no content is returned)."
          },
          "400": {
            "description": "Bad request (if an error arise parsing client request)."
          },
          "401": {
            "description": "Not Authorized (if an autherization error arise parsing client request)."
          },
          "500": {
            "description": "Internal Server Error (if an error arise on server side)."
          },
          "501": {
            "description": "Not Implemented (if the invoked api is not supported anymore)."
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/APPID"
        }
      ]
    },
    "/v2/apps/{APPID}/delegator": {
      "get": {
        "tags": [
          "From IoT App"
        ],
        "summary": "Get DELEGATOR v2",
        "description": "Same as V1, but supporting group's delegations. It returns a JSON representation of the DELEGATIONS that the specified _APPID_ gave to an user or group. If _APPID_ starts with http%3A%2F%2F, it is decoded. If _usernameDelegated_ is set to _ANONYMOUS_, the delegation is public/anonymous. Null values for _appId_ and _appType_ mean the delegation is valid for an Annotation made by the user (out of the IOT-APP context).",
        "parameters": [
          {
            "$ref": "#/components/parameters/sourceRequest"
          },
          {
            "$ref": "#/components/parameters/accessToken"
          },
          {
            "$ref": "#/components/parameters/lang"
          },
          {
            "$ref": "#/components/parameters/variableName"
          },
          {
            "$ref": "#/components/parameters/motivation"
          },
          {
            "$ref": "#/components/parameters/deleted"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/delegations"
          },
          "204": {
            "description": "No content (if no content is returned)."
          },
          "400": {
            "description": "Bad request (if an error arise parsing client request)."
          },
          "401": {
            "description": "Not Authorized (if an autherization error arise parsing client request)."
          },
          "500": {
            "description": "Internal Server Error (if an error arise on server side)."
          },
          "501": {
            "description": "Not Implemented (if the invoked api is not supported anymore)."
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/APPID"
        }
      ]
    },
    "/v1/apps/{APPID}/delegations": {
      "delete": {
        "tags": [
          "From IoT App"
        ],
        "summary": "Delete DELEGATION",
        "description": "It deletes all the DELEGATIONS made by the specified _APPID_. If _APPID_ starts with http%3A%2F%2F, it is decoded.",
        "parameters": [
          {
            "$ref": "#/components/parameters/sourceRequest"
          },
          {
            "$ref": "#/components/parameters/accessToken"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "description": "Deletion has been completed successfully."
          },
          "204": {
            "description": "No content (if no content is returned)."
          },
          "400": {
            "description": "Bad request (if an error arise parsing client request)."
          },
          "401": {
            "description": "Not Authorized (if an autherization error arise parsing client request)."
          },
          "500": {
            "description": "Internal Server Error (if an error arise on server side)."
          },
          "501": {
            "description": "Not Implemented (if the invoked api is not supported anymore)."
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/APPID"
        }
      ]
    },
    "/v1/username/{USERNAME}/data": {
      "get": {
        "tags": [
          "From Username"
        ],
        "summary": "Get DATA",
        "description": "It returns a JSON representation of the DATA belonging to the specified _USERNAME_.",
        "parameters": [
          {
            "$ref": "#/components/parameters/sourceRequest"
          },
          {
            "$ref": "#/components/parameters/accessToken"
          },
          {
            "$ref": "#/components/parameters/lang"
          },
          {
            "$ref": "#/components/parameters/from"
          },
          {
            "$ref": "#/components/parameters/to"
          },
          {
            "$ref": "#/components/parameters/first"
          },
          {
            "$ref": "#/components/parameters/last"
          },
          {
            "$ref": "#/components/parameters/variableName"
          },
          {
            "$ref": "#/components/parameters/motivation"
          },
          {
            "$ref": "#/components/parameters/delegated"
          },
          {
            "$ref": "#/components/parameters/anonymous"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getData"
          },
          "204": {
            "description": "No content (if no content is returned)."
          },
          "400": {
            "description": "Bad request (if an error arise parsing client request). Remarkable example: the passed DATA has the _APP_ID_ field not recognized."
          },
          "401": {
            "description": "Not Authorized (if an autherization error arise parsing client request)."
          },
          "500": {
            "description": "Internal Server Error (if an error arise on server side)."
          },
          "501": {
            "description": "Not Implemented (if the invoked api is not supported anymore)."
          }
        }
      },
      "post": {
        "tags": [
          "From Username"
        ],
        "summary": "Post DATA",
        "description": "It stores a JSON representation of a DATA for the specified _USERNAME_. If the DATA are successfully stored, it returns HTTP 200 and a JSON representation of the DATA. If the DATA to store include the field _id_ an HTTP 400 is returned (and an explanation is provided in the _Entity_). Fields _insertTime_, _deleteTime_, _elapseTime_ are overriden by the server.",
        "parameters": [
          {
            "$ref": "#/components/parameters/sourceRequest"
          },
          {
            "$ref": "#/components/parameters/accessToken"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "A JSON object with the data to be stored.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "dataTime",
                  "APPID",
                  "motivation",
                  "variableName",
                  "variableValue",
                  "variableUnit"
                ],
                "properties": {
                  "username": {
                    "type": "string",
                    "example": "mypersonaldata.tester"
                  },
                  "dataTime": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1523529262000
                  },
                  "APPID": {
                    "type": "string",
                    "example": "nrz3b5r"
                  },
                  "motivation": {
                    "type": "string",
                    "example": "testing"
                  },
                  "variableName": {
                    "type": "string",
                    "example": "personaldata"
                  },
                  "variableValue": {
                    "type": "string",
                    "example": 111
                  },
                  "variableUnit": {
                    "type": "string",
                    "example": "float"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/postData"
          },
          "204": {
            "description": "No content (if no content is returned)."
          },
          "400": {
            "description": "Bad request (if an error arise parsing client request). Remarkable example: the passed DATA has the _ID_ field NOT null."
          },
          "401": {
            "description": "Not Authorized (if an autherization error arise parsing client request)."
          },
          "500": {
            "description": "Internal Server Error (if an error arise on server side)."
          },
          "501": {
            "description": "Not Implemented (if the invoked api is not supported anymore)."
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/USERNAME"
        }
      ]
    },
    "/v1/username/{USERNAME}/delegated": {
      "get": {
        "tags": [
          "From Username"
        ],
        "summary": "Get DELEGATED v1",
        "description": "It returns a JSON representation of the DELEGATIONS that are given to the specified _USERNAME_ . If _usernameDelegated_ is set to _ANONYMOUS_, the delegation is public/anonymous. Null values for _appId_ and _appType_ mean the delegation is valid for an Annotation made by the user (out of the IOT-APP context). It does not return the group's delegations.",
        "parameters": [
          {
            "$ref": "#/components/parameters/sourceRequest"
          },
          {
            "$ref": "#/components/parameters/accessToken"
          },
          {
            "$ref": "#/components/parameters/lang"
          },
          {
            "$ref": "#/components/parameters/variableName"
          },
          {
            "$ref": "#/components/parameters/motivation"
          },
          {
            "$ref": "#/components/parameters/deleted"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/delegations"
          },
          "204": {
            "description": "No content (if no content is returned)."
          },
          "400": {
            "description": "Bad request (if an error arise parsing client request)."
          },
          "401": {
            "description": "Not Authorized (if an autherization error arise parsing client request)."
          },
          "500": {
            "description": "Internal Server Error (if an error arise on server side)."
          },
          "501": {
            "description": "Not Implemented (if the invoked api is not supported anymore)."
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/USERNAME"
        }
      ]
    },
    "/v2/username/{USERNAME}/delegated": {
      "get": {
        "tags": [
          "From Username"
        ],
        "summary": "Get DELEGATED v2",
        "description": "Same as V1, but supporting group's delegations. It returns a JSON representation of the DELEGATIONS that are given to the specified _USERNAME_. If _usernameDelegated_ is set to _ANONYMOUS_, the delegation is public/anonymous. Null values for _appId_ and _appType_ mean the delegation is valid for an Annotation made by the user (out of the IOT-APP context).",
        "parameters": [
          {
            "$ref": "#/components/parameters/sourceRequest"
          },
          {
            "$ref": "#/components/parameters/accessToken"
          },
          {
            "$ref": "#/components/parameters/lang"
          },
          {
            "$ref": "#/components/parameters/variableName"
          },
          {
            "$ref": "#/components/parameters/motivation"
          },
          {
            "$ref": "#/components/parameters/deleted"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/delegations"
          },
          "204": {
            "description": "No content (if no content is returned)."
          },
          "400": {
            "description": "Bad request (if an error arise parsing client request)."
          },
          "401": {
            "description": "Not Authorized (if an autherization error arise parsing client request)."
          },
          "500": {
            "description": "Internal Server Error (if an error arise on server side)."
          },
          "501": {
            "description": "Not Implemented (if the invoked api is not supported anymore)."
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/USERNAME"
        }
      ]
    },
    "/v1/username/{USERNAME}/delegator": {
      "get": {
        "tags": [
          "From Username"
        ],
        "summary": "Get DELEGATOR v1",
        "description": "It returns a JSON representation of the DELEGATIONS that the specified _USERNAME_ has given to an user. If _usernameDelegated_ is set to _ANONYMOUS_, the delegation is public/anonymous. Null values for _appId_ and _appType_ mean the delegation is valid for an Annotation made by the user (out of the IOT-APP context). It does not return the group's delegations.",
        "parameters": [
          {
            "$ref": "#/components/parameters/sourceRequest"
          },
          {
            "$ref": "#/components/parameters/accessToken"
          },
          {
            "$ref": "#/components/parameters/lang"
          },
          {
            "$ref": "#/components/parameters/variableName"
          },
          {
            "$ref": "#/components/parameters/motivation"
          },
          {
            "$ref": "#/components/parameters/deleted"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/delegations"
          },
          "204": {
            "description": "No content (if no content is returned)."
          },
          "400": {
            "description": "Bad request (if an error arise parsing client request)."
          },
          "401": {
            "description": "Not Authorized (if an autherization error arise parsing client request)."
          },
          "500": {
            "description": "Internal Server Error (if an error arise on server side)."
          },
          "501": {
            "description": "Not Implemented (if the invoked api is not supported anymore)."
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/USERNAME"
        }
      ]
    },
    "/v2/username/{USERNAME}/delegator": {
      "get": {
        "tags": [
          "From Username"
        ],
        "summary": "Get DELEGATOR v2",
        "description": "Same as V1, but supporting group's delegations. It returns a JSON representation of the DELEGATIONS that the specified _USERNAME_ gave to an user and to a group. If _usernameDelegated_ is set to _ANONYMOUS_, the delegation is public/anonymous. Null values for _appId_ and _appType_ mean the delegation is valid for an Annotation made by the user (out of the IOT-APP context).",
        "parameters": [
          {
            "$ref": "#/components/parameters/sourceRequest"
          },
          {
            "$ref": "#/components/parameters/accessToken"
          },
          {
            "$ref": "#/components/parameters/lang"
          },
          {
            "$ref": "#/components/parameters/variableName"
          },
          {
            "$ref": "#/components/parameters/motivation"
          },
          {
            "$ref": "#/components/parameters/deleted"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/delegations"
          },
          "204": {
            "description": "No content (if no content is returned)."
          },
          "400": {
            "description": "Bad request (if an error arise parsing client request)."
          },
          "401": {
            "description": "Not Authorized (if an autherization error arise parsing client request)."
          },
          "500": {
            "description": "Internal Server Error (if an error arise on server side)."
          },
          "501": {
            "description": "Not Implemented (if the invoked api is not supported anymore)."
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/USERNAME"
        }
      ]
    },
    "/v1/username/{USERNAME}/delegation/check": {
      "get": {
        "tags": [
          "From Username"
        ],
        "summary": "Check DELEGATIONS",
        "description": "It allows to check if a DELEGATION exist for the given _USERNAME_, _elementID_ and _variableName_. If a delegation is found, a JSON messge is returned with _result_ set to _true_, and _message_ set to one of _OWNER_, _DELEGATED_, _GROUP-DELEGATED_, _PUBLIC_. If no DELEGATION can be found, a JSON message is returned with _result_ set to _false_.",
        "parameters": [
          {
            "$ref": "#/components/parameters/sourceRequest"
          },
          {
            "$ref": "#/components/parameters/accessToken"
          },
          {
            "name": "variableName",
            "in": "query",
            "description": "The variable name filter.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "personaldata"
          },
          {
            "name": "elementID",
            "in": "query",
            "description": "The element ID filter.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "nr1ux28"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "description": "If a delegation is found, a JSON messge is returned with _result_ set to _true_, and _message_ set to one of _OWNER_, _DELEGATED_, _GROUP-DELEGATED_, _PUBLIC_. If no DELEGATION can be found, a JSON message is returned with _result_ set to _false_.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "result",
                    "message"
                  ],
                  "properties": {
                    "result": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "enum": [
                        "OWNER",
                        "DELEGATED",
                        "GROUP-DELEGATED",
                        "PUBLIC"
                      ],
                      "example": "DELEGATED"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/USERNAME"
        }
      ]
    },
    "/v1/username/{USERNAME}/delegation": {
      "post": {
        "tags": [
          "From Username"
        ],
        "summary": "Post DELEGATION",
        "description": "It stores a JSON representation of a DELEGATION for the specified _USERNAME_. If the DELEGATION is successfully stored, it returns HTTP 200 and a JSON representation of the new DELEGATION. If the DELEGATION to be stored includes the field _id_ an HTTP 400 is returned (and an explanation is provided in the _Entity_). Fields _insertTime_, _deleteTime_, and _elapseTime_ are overriden by the server. It is checked that the username specified as DELEGATED exists in LDAP.",
        "parameters": [
          {
            "$ref": "#/components/parameters/sourceRequest"
          },
          {
            "$ref": "#/components/parameters/accessToken"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "usernameDelegated",
                  "elementId",
                  "elementType"
                ],
                "properties": {
                  "usernameDelegated": {
                    "type": "string",
                    "example": "mypersonaldata.tester2"
                  },
                  "usernameDelegator": {
                    "type": "string",
                    "example": "mypersonaldata.tester"
                  },
                  "elementId": {
                    "type": "string",
                    "example": "nrz3b5r"
                  },
                  "elementType": {
                    "type": "string",
                    "example": "AppID"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/postDelegation"
          },
          "204": {
            "description": "No content (if no content is returned)."
          },
          "400": {
            "description": "Bad request (if an error arise parsing client request). Remarkable example: the passed DELEGATION has the ID field NOT null."
          },
          "401": {
            "description": "Not Authorized (if an autherization error arise parsing client request)."
          },
          "500": {
            "description": "Internal Server Error (if an error arise on server side)."
          },
          "501": {
            "description": "Not Implemented (if the invoked api is not supported anymore)."
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/USERNAME"
        }
      ]
    },
    "/v1/username/{USERNAME}/delegation/{DELEGATION_ID}": {
      "put": {
        "tags": [
          "From Username"
        ],
        "summary": "Put DELEGATION",
        "description": "It stores an update for the JSON representation of a DELEGATION for the specified _DELEGATION_ID_, belonging to the specified _USERNAME_. If the DELEGATION is successfully stored, it returns an HTTP 200 and a JSON representation of the new version of the DELEGATION. If the DELEGATION includes the field _id_ an HTTP 400 is returned (and an explanation is provided in the _Entity_). Fields _insertTime_, _deleteTime_, and _elapseTime_ are overriden by the server. It is checked that the username specified as DELEGATED exists in LDAP.",
        "parameters": [
          {
            "$ref": "#/components/parameters/sourceRequest"
          },
          {
            "$ref": "#/components/parameters/accessToken"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/putDelegation"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/postDelegation"
          },
          "204": {
            "description": "No content (if no content is returned)."
          },
          "400": {
            "description": "Bad request (if an error arise parsing client request). Remarkable example: the passed DELEGATION has the ID field NOT null."
          },
          "401": {
            "description": "Not Authorized (if an autherization error arise parsing client request)."
          },
          "500": {
            "description": "Internal Server Error (if an error arise on server side)."
          },
          "501": {
            "description": "Not Implemented (if the invoked api is not supported anymore)."
          }
        }
      },
      "delete": {
        "tags": [
          "From Username"
        ],
        "summary": "Delete DELEGATION",
        "description": "It deletes a _DELEGATION_ID_ belonging to the specified _USERNAME_.",
        "parameters": [
          {
            "$ref": "#/components/parameters/sourceRequest"
          },
          {
            "$ref": "#/components/parameters/accessToken"
          },
          {
            "$ref": "#/components/parameters/lang"
          }
        ],
        "responses": {
          "200": {
            "description": "If the delegation is successfully deleted, an HTTP status code 200 is returned."
          },
          "204": {
            "description": "No content (if no content is returned)."
          },
          "400": {
            "description": "Bad request (if an error arise parsing client request). Remarkable example: the passed DELEGATION has the ID not recognized."
          },
          "401": {
            "description": "Not Authorized (if an autherization error arise parsing client request)."
          },
          "500": {
            "description": "Internal Server Error (if an error arise on server side)."
          },
          "501": {
            "description": "Not Implemented (if the invoked api is not supported anymore)."
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/USERNAME"
        },
        {
          "$ref": "#/components/parameters/DELEGATION_ID"
        }
      ]
    },
    "/v1/apps/{APPID}/activity": {
      "get": {
        "tags": [
          "Activity"
        ],
        "summary": "Get ACTIVITY",
        "description": "It returns a JSON representation of the activities that an _APPID_ has invoked.",
        "parameters": [
          {
            "$ref": "#/components/parameters/accessToken"
          },
          {
            "$ref": "#/components/parameters/lang"
          },
          {
            "$ref": "#/components/parameters/activityDelegated"
          }
        ],
        "responses": {
          "200": {
            "description": "It returns a JSON representation of the activities that an _APPID_ has invoked.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "id",
                    "time",
                    "appId",
                    "username",
                    "delegatedAppId",
                    "delegatedUsername"
                  ],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int32",
                      "example": 156
                    },
                    "time": {
                      "type": "integer",
                      "format": "int64",
                      "example": 1526392725000
                    },
                    "appId": {
                      "type": "string",
                      "example": "f9208f95d7a81d04e7925bb9c7ed388fb9e0c2ce94dab850f55db554cc92c299"
                    },
                    "username": {
                      "type": "string",
                      "example": "badii"
                    },
                    "delegatedAppId": {
                      "type": "string",
                      "example": "244a29787d16e7ba720163890c87a76e05dfccfac835cc0fd2700ddf0480f137"
                    },
                    "delegatedUsername": {
                      "type": "string",
                      "example": "PaoloNesi"
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No content (if no content is returned)."
          },
          "400": {
            "description": "Bad request (if an error arise parsing client request)."
          },
          "401": {
            "description": "Not Authorized (if an autherization error arise parsing client request)."
          },
          "500": {
            "description": "Internal Server Error (if an error arise on server side)."
          },
          "501": {
            "description": "Not Implemented (if the invoked api is not supported anymore)."
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/APPID"
        }
      ]
    },
    "/v1/data": {
      "get": {
        "tags": [
          "From Outside"
        ],
        "summary": "It returns ALL the DATA.",
        "parameters": [
          {
            "$ref": "#/components/parameters/sourceRequest"
          },
          {
            "$ref": "#/components/parameters/accessToken"
          },
          {
            "$ref": "#/components/parameters/lang"
          },
          {
            "name": "last",
            "in": "query",
            "description": "If set to true, just the last value for a combined key (_username_, _appId_, _motivation_, _variableName_) is returned. It defaults to false.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            },
            "example": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getPublicData"
          },
          "204": {
            "description": "No content (if no content is returned)."
          },
          "400": {
            "description": "Bad request (if an error arise parsing client request)."
          },
          "401": {
            "description": "Not Authorized (if an autherization error arise parsing client request)."
          },
          "500": {
            "description": "Internal Server Error (if an error arise on server side)."
          },
          "501": {
            "description": "Not Implemented (if the invoked api is not supported anymore)."
          }
        }
      }
    }
  },
  "components": {
    "parameters": {
      "APPID": {
        "name": "APPID",
        "in": "path",
        "description": "The identifier of the application to which the data belong.",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "nrz3b5r"
      },
      "sourceRequest": {
        "name": "sourceRequest",
        "in": "query",
        "description": "Name of the module that calls the api (sample values are _iotapp_, _dashboardwizard_, _dashboardmanager_, and so on)",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "testing"
      },
      "accessToken": {
        "name": "accessToken",
        "in": "query",
        "description": "The token that grants the access. It has to be valid and not elapsed.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "variableName": {
        "name": "variableName",
        "in": "query",
        "description": "Variable name filter.",
        "required": false,
        "schema": {
          "type": "string"
        },
        "example": "personaldata"
      },
      "motivation": {
        "name": "motivation",
        "in": "query",
        "description": "Motivation filter.",
        "required": false,
        "schema": {
          "type": "string"
        },
        "example": "testing"
      },
      "lang": {
        "name": "lang",
        "in": "query",
        "description": "Language of the module that calls the api. It defaults to _en_.",
        "required": false,
        "schema": {
          "type": "string",
          "default": "en"
        },
        "example": "en"
      },
      "USERNAME": {
        "name": "USERNAME",
        "in": "path",
        "description": "The unique identifier of the user.",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "mypersonaldata.tester"
      },
      "from": {
        "name": "from",
        "in": "query",
        "description": "Lower bound time period filter. Expected format is \"yyyy-MM-dd'T'HH:mm:ss\".",
        "required": false,
        "schema": {
          "type": "string",
          "format": "date-time"
        },
        "example": "2018-05-01T11:35:20.000Z"
      },
      "to": {
        "name": "to",
        "in": "query",
        "description": "Upper bound time period filter. Expected format is \"yyyy-MM-dd'T'HH:mm:ss\".",
        "required": false,
        "schema": {
          "type": "string",
          "format": "date-time"
        },
        "example": "2018-11-30T11:35:20.000Z"
      },
      "first": {
        "name": "first",
        "in": "query",
        "description": "How many data have to be returned, from the first one, ordered by _data_time_. It cannot be used with _last_. It defaults to \"0\", that means no limit. The maximum allowed value is 1000.",
        "required": false,
        "schema": {
          "type": "integer",
          "format": "int32",
          "default": 0,
          "maximum": 1000
        },
        "example": 0
      },
      "last": {
        "name": "last",
        "in": "query",
        "description": "How many data have to be returned, from the last one, ordered by _data_time_. It cannot be used with _first_. It defaults to \"0\", that means no limit. The maximum allowed value is 1000.",
        "required": false,
        "schema": {
          "type": "integer",
          "format": "int32",
          "default": 0,
          "maximum": 1000
        },
        "example": 0
      },
      "delegated": {
        "name": "delegated",
        "in": "query",
        "description": "If true, the api return just the data from an APPID that has been delegated. It defaults to _false_.",
        "required": false,
        "schema": {
          "type": "boolean",
          "default": false
        },
        "example": false
      },
      "activityDelegated": {
        "name": "delegated",
        "in": "query",
        "description": "If set to true, just the activities in which a result included a data from my container are returned.",
        "required": false,
        "schema": {
          "type": "boolean",
          "default": false
        },
        "example": false
      },
      "anonymous": {
        "name": "anonymous",
        "in": "query",
        "description": "If true, the API returns just the data from an APPID that has been configured as public. It defaults to _false_.",
        "required": false,
        "schema": {
          "type": "boolean",
          "default": false
        },
        "example": false
      },
      "deleted": {
        "name": "deleted",
        "in": "query",
        "description": "If true, delegations marked as _DELETED_ will be returned also. In those delegations, the field _deleteTime_ is set that indicates the date and time of deletion.",
        "required": false,
        "schema": {
          "type": "boolean",
          "default": false
        },
        "example": false
      },
      "DELEGATION_ID": {
        "name": "DELEGATION_ID",
        "in": "path",
        "description": "The identifier of the delegation.",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int32"
        },
        "example": 615
      }
    },
    "responses": {
      "getData": {
        "description": "A JSON array with the retrieved data is returned.",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "username",
                  "dataTime",
                  "APPName",
                  "APPID",
                  "motivation",
                  "variableName",
                  "variableValue",
                  "variableUnit"
                ],
                "properties": {
                  "username": {
                    "type": "string",
                    "example": "adifino"
                  },
                  "dataTime": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1523529262000
                  },
                  "APPName": {
                    "type": "string",
                    "example": "nr28"
                  },
                  "APPID": {
                    "type": "string",
                    "example": "6ff3a0ea0a5d92f345fa13c95d0b35ff77204413b9c98e3a71b1d269a26af11e"
                  },
                  "motivation": {
                    "type": "string",
                    "example": "Shared Position"
                  },
                  "variableName": {
                    "type": "string",
                    "example": "latitude_longitude"
                  },
                  "variableValue": {
                    "type": "string",
                    "example": "[43.20,11.15]"
                  },
                  "variableUnit": {
                    "type": "string",
                    "example": "gradi decimali"
                  }
                }
              }
            }
          }
        }
      },
      "getPublicData": {
        "description": "A JSON array with the retrieved data is returned.",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "id",
                  "uid",
                  "username",
                  "dataTime",
                  "APPName",
                  "APPID",
                  "motivation",
                  "variableName",
                  "variableValue",
                  "variableUnit",
                  "uidName"
                ],
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "int64",
                    "example": 32
                  },
                  "uid": {
                    "type": "integer",
                    "format": "int64",
                    "example": 66
                  },
                  "username": {
                    "type": "string",
                    "example": "adifino"
                  },
                  "dataTime": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1523529262000
                  },
                  "APPName": {
                    "type": "string",
                    "example": "nr28"
                  },
                  "APPID": {
                    "type": "string",
                    "example": "6ff3a0ea0a5d92f345fa13c95d0b35ff77204413b9c98e3a71b1d269a26af11e"
                  },
                  "motivation": {
                    "type": "string",
                    "example": "TIP04"
                  },
                  "variableName": {
                    "type": "string",
                    "example": "LATITUDE"
                  },
                  "variableValue": {
                    "type": "string",
                    "example": 50.5
                  },
                  "variableUnit": {
                    "type": "string",
                    "example": "coord"
                  },
                  "uidName": {
                    "type": "string",
                    "example": "adifino"
                  }
                }
              }
            }
          }
        }
      },
      "postData": {
        "description": "A JSON object with the stored data is returned.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "username",
                "dataTime",
                "APPName",
                "APPID",
                "motivation",
                "variableName",
                "variableValue",
                "variableUnit"
              ],
              "properties": {
                "username": {
                  "type": "string",
                  "example": "adifino"
                },
                "dataTime": {
                  "type": "integer",
                  "format": "int64",
                  "example": 1523529262000
                },
                "APPName": {
                  "type": "string",
                  "example": "nr28"
                },
                "APPID": {
                  "type": "string",
                  "example": "6ff3a0ea0a5d92f345fa13c95d0b35ff77204413b9c98e3a71b1d269a26af11e"
                },
                "motivation": {
                  "type": "string",
                  "example": "Shared Position"
                },
                "variableName": {
                  "type": "string",
                  "example": "latitude_longitude"
                },
                "variableValue": {
                  "type": "string",
                  "example": "[43.20,11.15]"
                },
                "variableUnit": {
                  "type": "string",
                  "example": "gradi decimali"
                }
              }
            }
          }
        }
      },
      "delegations": {
        "description": "If delegations can be found, an HTTP status code 200 is returned, and a JSON representation of the delegations is provided in the response body. If _usernameDelegated_ is set to _ANONYMOUS_, it means that it is a public/anonymous delegation. Also, if _appId_ and _appType_ are null/missing, it means that the delegation is valid for Annotation made by the user out of the IOT-APP context.",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "id",
                  "usernameDelegator",
                  "usernameDelegated",
                  "variableName",
                  "motivation",
                  "elementId",
                  "elementType"
                ],
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "int32",
                    "example": 27
                  },
                  "usernameDelegator": {
                    "type": "string",
                    "example": "pb1"
                  },
                  "usernameDelegated": {
                    "type": "string",
                    "example": "adifino"
                  },
                  "variableName": {
                    "type": "string",
                    "example": "latitude_longitude"
                  },
                  "motivation": {
                    "type": "string",
                    "example": "Shared Position"
                  },
                  "elementId": {
                    "type": "string",
                    "example": "cab5c0cbf1585a072488954723e198c1c16f6fe3bb220120ba4a25416e7ed9a3"
                  },
                  "elementType": {
                    "type": "string",
                    "example": "AppID"
                  },
                  "deleteTime": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1523529262000
                  }
                }
              }
            }
          }
        }
      },
      "postDelegation": {
        "description": "A JSON object with the stored delegation is returned.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "id",
                "usernameDelegator",
                "usernameDelegated",
                "elementId",
                "elementType"
              ],
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int32",
                  "example": 27
                },
                "usernameDelegator": {
                  "type": "string",
                  "example": "pb1"
                },
                "usernameDelegated": {
                  "type": "string",
                  "example": "adifino"
                },
                "elementId": {
                  "type": "string",
                  "example": "cab5c0cbf1585a072488954723e198c1c16f6fe3bb220120ba4a25416e7ed9a3"
                },
                "elementType": {
                  "type": "string",
                  "example": "AppID"
                }
              }
            }
          }
        }
      }
    },
    "requestBodies": {
      "putDelegation": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "id",
                "usernameDelegated",
                "elementId",
                "elementType",
                "motivation"
              ],
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int32",
                  "example": 615
                },
                "usernameDelegator": {
                  "type": "string",
                  "example": "mypersonaldata.tester"
                },
                "usernameDelegated": {
                  "type": "string",
                  "example": "mypersonaldata.tester2"
                },
                "elementId": {
                  "type": "string",
                  "example": "nrz3b5r"
                },
                "elementType": {
                  "type": "string",
                  "example": "AppID"
                },
                "motivation": {
                  "type": "string",
                  "example": "testing"
                }
              }
            }
          }
        }
      }
    }
  }
}